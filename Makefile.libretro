LIBRETRO = ./libretro

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

ifeq ($(platform), android)
   CC = arm-linux-androideabi-gcc
   AR = @arm-linux-androideabi-ar
   LD = @arm-linux-androideabi-g++ 
   TARGET := libretro-hatari.so
   fpic := -fPIC
   SHARED :=  -Wl,--fix-cortex-a8 -llog -lz -shared -Wl,--version-script=$(LIBRETRO)/link.T -Wl,--no-undefined
   PLATFLAGS := -DAND -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), unix)
   CC = gcc
   TARGET := libretro-hatari.so
   fpic := -fPIC
   SHARED :=  -lz -lpthread -shared -Wl,--version-script=$(LIBRETRO)/link.T -Wl,--no-undefined
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), osx)
   TARGET := libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   PLATFLAGS := -DLSB_FIRST -DALIGN_DWORD  -D__LIBRETRO__
else ifeq ($(platform), wii)
   TARGET := hatari_libretro_wii.a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)   
   ZLIB_DIR = $(LIBRETRO)/utils/zlib/
   ZLIB_OBJECTS	:= $(ZLIB_DIR)adler32.o $(ZLIB_DIR)compress.o $(ZLIB_DIR)crc32.o $(ZLIB_DIR)deflate.o \
		$(ZLIB_DIR)gzclose.o $(ZLIB_DIR)gzlib.o $(ZLIB_DIR)gzread.o\
		$(ZLIB_DIR)gzwrite.o $(ZLIB_DIR)infback.o $(ZLIB_DIR)inffast.o $(ZLIB_DIR)inflate.o \
		$(ZLIB_DIR)trees.o $(ZLIB_DIR)inftrees.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)zutil.o 
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) -I$(DEVKITPRO)/libogc/include \
	-D__powerpc__ -D__POWERPC__ -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float -D__ppc__
   SHARED :=   -lm -lpthread -lc
   PLATFLAGS :=  -D__LIBRETRO__ -DALIGN_DWORD
else ifeq ($(platform), ps3)
   TARGET := hatari_libretro_ps3.a
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   ZLIB_DIR = $(LIBRETRO)/utils/zlib/
   ZLIB_OBJECTS	:= $(ZLIB_DIR)adler32.o $(ZLIB_DIR)compress.o $(ZLIB_DIR)crc32.o $(ZLIB_DIR)deflate.o \
		$(ZLIB_DIR)gzclose.o $(ZLIB_DIR)gzlib.o $(ZLIB_DIR)gzread.o\
		$(ZLIB_DIR)gzwrite.o $(ZLIB_DIR)infback.o $(ZLIB_DIR)inffast.o $(ZLIB_DIR)inflate.o \
		$(ZLIB_DIR)trees.o $(ZLIB_DIR)inftrees.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)uncompr.o $(ZLIB_DIR)zutil.o 
   SHARED :=   -lm -lpthread -lc
   CFLAGS += -DSDL_BYTEORDER=SDL_BIG_ENDIAN -DMSB_FIRST -DBYTE_ORDER=BIG_ENDIAN  -DBYTE_ORDER=BIG_ENDIAN \
	-D__CELLOS_LV2 -DHAVE_MEMALIGN -DHAVE_ASPRINTF -I$(ZLIB_DIR) 
   PLATFLAGS :=  -D__LIBRETRO__ -DALIGN_DWORD 
else
   #CC = i586-mingw32msvc-gcc
   CC = x86_64-w64-mingw32-gcc
   PLATFLAGS :=  -D__LIBRETRO__ -DLSB_FIRST -DALIGN_DWORD -DWIN32PORT -DWIN32
   TARGET := hatari_libretro.dll
   SHARED := -shared -static-libgcc -s -Wl,--version-script=$(LIBRETRO)/link.T -Wl,--no-undefined 
endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g
else
   CFLAGS += -O3
endif

CFLAGS += \
	-std=gnu99 -finline-functions -funroll-loops  -fsigned-char  \
	-Wno-strict-prototypes -ffast-math -fomit-frame-pointer -fno-strength-reduce  -fno-builtin -finline-functions -s

CXXFLAGS  +=	$(CFLAGS) -std=gnu++0x
CPPFLAGS += $(CFLAGS)

#START COMMON PART

EMU = src
CPU = $(EMU)/uae-cpu
FALCON = $(EMU)/falcon
DBG = $(EMU)/debug
FLP = $(EMU)
GUI = $(LIBRETRO)/gui-retro
CPU_PREGEN = $(LIBRETRO)/uae-cpu-pregen
LIBCOOBJ = $(LIBRETRO)/utils/libco
LIBUTILS = $(LIBRETRO)/utils

CPUC_SRCS = \
$(CPU_PREGEN)/cpudefs.o \
$(CPU_PREGEN)/cpuemu.o \
$(CPU_PREGEN)/cpustbl.o \
$(CPU)/hatari-glue.o \
$(CPU)/memory.o \
$(CPU)/newcpu.o \
$(CPU)/readcpu.o \
$(CPU)/fpp.o

DLG_SRCS = \
$(GUI)/dlgAbout.o \
$(GUI)/dlgAlert.o \
$(GUI)/dlgDevice.o \
$(GUI)/dlgFileSelect.o \
$(GUI)/dlgFloppy.o \
$(GUI)/dlgHardDisk.o \
$(GUI)/dlgJoystick.o \
$(GUI)/dlgKeyboard.o \
$(GUI)/dlgMain.o \
$(GUI)/dlgMemory.o \
$(GUI)/dlgNewDisk.o \
$(GUI)/dlgRom.o \
$(GUI)/dlgScreen.o \
$(GUI)/dlgSound.o \
$(GUI)/dlgSystem.o \
$(GUI)/sdlgui.o

FALC_SRCS = \
$(FALCON)/crossbar.o \
$(FALCON)/dsp.o \
$(FALCON)/dsp_core.o \
$(FALCON)/dsp_cpu.o \
$(FALCON)/dsp_disasm.o \
$(FALCON)/hostscreen.o \
$(FALCON)/microphone.o \
$(FALCON)/nvram.o \
$(FALCON)/videl.o

DBG_SRCS = \
$(DBG)/log.o \
$(DBG)/debugui.o \
$(DBG)/breakcond.o \
$(DBG)/debugcpu.o \
$(DBG)/debugInfo.o \
$(DBG)/debugdsp.o \
$(DBG)/evaluate.o \
$(DBG)/history.o \
$(DBG)/symbols.o \
$(DBG)/profile.o \
$(DBG)/profilecpu.o \
$(DBG)/profiledsp.o \
$(DBG)/natfeats.o \
$(DBG)/console.o \
$(DBG)/68kDisass.o

FLP_SRCS = \
$(FLP)/createBlankImage.o \
$(FLP)/dim.o \
$(FLP)/msa.o \
$(FLP)/st.o \
$(FLP)/zip.o

CORE_SRCS = \
$(EMU)/acia.o \
$(EMU)/audio.o \
$(EMU)/avi_record.o \
$(EMU)/bios.o \
$(EMU)/blitter.o \
$(EMU)/cart.o \
$(EMU)/cfgopts.o \
$(EMU)/clocks_timings.o \
$(EMU)/configuration.o \
$(EMU)/options.o \
$(EMU)/change.o \
$(EMU)/control.o \
$(EMU)/cycInt.o \
$(EMU)/cycles.o \
$(EMU)/dialog.o \
$(EMU)/dmaSnd.o \
$(EMU)/fdc.o \
$(EMU)/file.o \
$(EMU)/floppy.o \
$(EMU)/floppy_ipf.o \
$(EMU)/floppy_stx.o \
$(EMU)/gemdos.o \
$(EMU)/hd6301_cpu.o \
$(EMU)/hdc.o \
$(EMU)/ide.o \
$(EMU)/ikbd.o \
$(EMU)/ioMem.o \
$(EMU)/ioMemTabST.o \
$(EMU)/ioMemTabSTE.o \
$(EMU)/ioMemTabTT.o \
$(EMU)/ioMemTabFalcon.o \
$(EMU)/joy.o \
$(EMU)/keymap.o \
$(EMU)/m68000.o \
$(EMU)/main.o \
$(EMU)/midi.o \
$(EMU)/memorySnapShot.o \
$(EMU)/mfp.o \
$(EMU)/paths.o \
$(EMU)/psg.o \
$(EMU)/printer.o \
$(EMU)/resolution.o \
$(EMU)/rs232.o \
$(EMU)/reset.o \
$(EMU)/rtc.o \
$(EMU)/scandir.o \
$(EMU)/stMemory.o \
$(EMU)/screen.o \
$(EMU)/screenSnapShot.o \
$(EMU)/shortcut.o \
$(EMU)/sound.o \
$(EMU)/spec512.o \
$(EMU)/statusbar.o \
$(EMU)/str.o \
$(EMU)/tos.o \
$(EMU)/unzip.o \
$(EMU)/utils.o \
$(EMU)/vdi.o \
$(EMU)/video.o \
$(EMU)/wavFormat.o \
$(EMU)/xbios.o \
$(EMU)/ymFormat.o

LIBCO_SRCS = $(LIBCOOBJ)/libco.o 

ifeq ($(platform),android)
LIBCO_SRCS += $(LIBCOOBJ)/armeabi_asm.o
else
UNAME_M := $(shell uname -m)
ifneq ($(filter arm%,$(UNAME_M)),)
LIBCO_SRCS += $(LIBCOOBJ)/armeabi_asm.o	
endif
endif

BUILD_APP =  $(ZLIB_OBJECTS) $(CPUC_SRCS) $(FALC_SRCS)  $(FLP_SRCS) $(DBG_SRCS)  $(CORE_SRCS) $(DLG_SRCS) $(LIBCO_SRCS)

HINCLUDES := -I./$(EMU)  -I./$(CPU)  -I./$(FALCON)  \
	-I./$(EMU)/includes -I./$(DBG) -I./$(FLP) \
	-I$(LIBRETRO) -I$(LIBRETRO)/include -I$(LIBUTILS) -I$(CPU_PREGEN)


OBJECTS := $(LIBRETRO)/libretro.o $(LIBRETRO)/hatari-mapper.o $(LIBRETRO)/vkbd.o \
	$(LIBRETRO)/graph.o $(LIBRETRO)/bmp.o $(BUILD_APP)

#END COMMON PART 

all: $(TARGET)

ifeq ($(platform), wii)
$(TARGET): $(OBJECTS) 
	$(AR) rcs $@ $(OBJECTS) 
else ifeq ($(platform), ps3)
$(TARGET): $(OBJECTS) 
	$(AR) rcs $@ $(OBJECTS) 

else ifeq ($(platform), win)
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz
else ifeq ($(platform), android)
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz
else
$(TARGET): $(OBJECTS)
	$(CC) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS)  -lm -lz -lpthread

endif

%.o: %.c
	$(CC) $(fpic) $(CFLAGS) $(PLATFLAGS) $(HINCLUDES) -c -o $@ $<

clean:
	rm -f $(OBJECTS) $(TARGET) 

.PHONY: clean

